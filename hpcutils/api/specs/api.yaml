openapi: 3.0.5
info:
  version: 0.0.1
  title: hpcutils

paths:
  /health_check:
    get:
      tags:
        - health_check
      operationId: hpcutils.api.views.health_check
      summary: Check API alive
      responses:
        200:
          description: 'Checks to see if API is alive'

  /create/{cluster}:
    post:
      tags:
        - create
      operationId: hpcutils.api.views.create_cluster_config
      parameters:
        - $ref: '#/components/parameters/Cluster'
        - $ref: '#/components/parameters/ProjectName'
        - $ref: '#/components/parameters/GithubUsername'
        - $ref: '#/components/parameters/GithubRepository'
      responses:
        200:
          description: 'successfully created cluster config'

  /run/gpu/{cluster}:
    post:
      tags:
        - run
      operationId: hpcutils.api.views.run_gpu_job
      parameters:
        - $ref: '#/components/parameters/Cluster'
        - $ref: '#/components/parameters/ProjectName'
        - $ref: '#/components/parameters/Walltime'
        - $ref: '#/components/parameters/StorageMem'
        - $ref: '#/components/parameters/ScriptTemplateName'
        - $ref: '#/components/parameters/EnvVars'
        - $ref: '#/components/parameters/JobName'
      summary: Submit myriad job
      responses:
        200:
          description: 'successfully submitted job'
  /gpu/myriad:
    post:
      tags:
        - submit
      operationId: hpcutils.api.views.gpu_myriad
      parameters:
        - $ref: '#/components/parameters/ProjectName'
        - $ref: '#/components/parameters/Walltime'
        - $ref: '#/components/parameters/StorageMem'
        - $ref: '#/components/parameters/ScriptTemplateName'
        - $ref: '#/components/parameters/EnvVars'
        - $ref: '#/components/parameters/JobName'
      summary: Submit myriad job
      responses:
        200:
          description: 'successfully submitted job'



components:
  parameters:
    ProjectName:
      name: project_name
      in: path
      required: true
      description: name of project
      schema:
        $ref: '#/components/schemas/ProjectName'
    Cluster:
      name: cluster
      in: path
      required: true
      description: name of cluster
      schema:
        $ref: '#/components/schemas/Cluster'
    Walltime:
      name: walltime
      in: query
      required: true
      description: maximum walltime to use
      schema:
        $ref: '#/components/schemas/Walltime'
    StorageMem:
      name: storage_mem
      in: query
      required: true
      description: temporary storage memory (in Gigs)
      schema:
        $ref: '#/components/schemas/StorageMem'
    JobName:
      name: job_name
      in: query
      required: false
      description: job name. If empty will be inferred
      schema:
        $ref: '#/components/schemas/JobName'

    EnvVars:
      name: env_vars
      in: query
      required: true
      description: environment variables
      schema:
        $ref: '#/components/schemas/EnvVars'

    ScriptTemplateName:
      name: script_template_name
      in: query
      required: true
      description: path to bash script template
      schema:
        $ref: '#/components/schemas/ScriptTemplateName'

  schemas:
    Cluster:
      type: string
      enum: ["myriad", "beaker"]
    ProjectName:
      type: string

    Walltime:
      type: string
      example: "6:00:00"
    StorageMem:
      type: integer
      example: 15
    JobName:
      type: string
    EnvVars:
      type: object
    ScriptTemplateName:
      type: string
      example: div_examples.sh

    Dataset:
      type: string
      example: AAE
      nullable: false
      enum: [AAE, PERSUADE]
      description: Name of the dataset
    LabellingStrategy:
      type: string
      example: io
      enum: [io, bio, bieo, bixo]
      nullable: false
      description: Strategy to label words in a given text segment
    AggregationStrategy:
      type: string
      example: first
      enum: [first, mean, max]
      nullable: false
      description: aggregation strategy for mapping back from tokens to words
    ModelName:
      type: string
      example: google/bigbird-roberta-base
      nullable: false
      description: name of the model to use. Can be any generic one from HuggingFace or one of our models
    LabellingStrategyScope:
      type: string
      nullable: false
      enum: [standard, wordLevel]
      default: standard
      description: level to apply labelling strategy at. If standard then inside subtokens labelled as I-.
    MaxLength:
      type: integer
      nullable: false
      default: 512
      description: maximum number of tokens per passage
    BatchSize:
      type: integer
      nullable: false
      default: 32
      description: batch size for inference
    Labels:
      type: array
      items:
        type: string
        example: Other
        uniqueItems: true

      description: Labels present in data
    TextSegments:
      type: array
      items:
        type: array
        items:
          type: string
          example: "Claim:: NLP is the best ML field!"

    HuggingFaceError:
      type: object
      properties:
        type:
          type: string
          example: tokenizer
        name:
          type: string
          example: model
        error:
          type: string

    DimensionMismatchError:
      type: object
      properties:
        error:
          type: string
        expected:
          type: string
        received:
          type: string

    InferenceResponse:
      type: object
      properties:

        score_table:
          type: string
    OurModels:
      type: string
      enum: [ucabqfe/roberta_AAE_bieo, ucabqfe/roberta_AAE_bio, ucabqfe/roberta_AAE_io, ucabqfe/roberta_PER_bieo, ucabqfe/roberta_PER_bio, ucabqfe/roberta_PER_io, ucabqfe/bigBird_AAE_bieo, ucabqfe/bigBird_AAE_bio, ucabqfe/bigBird_AAE_io, ucabqfe/bigBird_PER_bieo, ucabqfe/bigBird_PER_bio, ucabqfe/bigBird_PER_io]
      default: ucabqfe/roberta_AAE_bieo

    ModelInfoResponse:
      type: object
      properties:
        hugging_face_model_name:
          type: string
          description: name of base model used for training
        labels:
          type: string
    PredictionResponse:
      type: object


  #definitions:
  #  User:
  #    type: object
  #    properties:
  #      id:
  #        type: integer
  #        description: The user ID.
  #      username:
  #        type: string
  #        description: The user name.



